{"version":3,"sources":["reducer/index.tsx","context/index.tsx","provider/index.tsx","components/search/input.tsx","hooks/useDebounce.tsx","components/list/listitem.tsx","components/list/list.tsx","components/list/pagination/button.tsx","components/list/pagination/container.tsx","hooks/useApi.tsx","utils/contants.tsx","components/list/container.tsx","components/details/details.tsx","components/details/container.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["appReducer","state","action","payload","type","isLoading","isError","error","data","query","currentPage","Error","initialState","total","lastPage","AppStateContext","React","createContext","AppDispatchContext","dispatch","useAppState","context","useContext","undefined","useAppDispatch","AppProvider","children","useReducer","console","log","Provider","value","SearchInput","memo","lastquery","useState","setQuery","debounced","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","TextField","label","variant","onChange","e","target","placeholder","CustomListItem","props","user","ListItem","ListItemAvatar","Avatar","src","avatar_url","ListItemText","primary","login","secondary","score","ListItemSecondaryAction","to","UserList","List","dense","users","map","key","id","PaginationButton","onClick","index","color","active","IconButton","size","PaginationContainer","links","getLastPage","style","display","flexWrap","justifyContent","buttons","i","push","createPaginationArray","last","page","parse","parseInt","useApi","url","canceled","a","axios","result","message","fetchData","CONSTANTS","name","ListContainer","setUrl","width","Typography","UserDetails","company","followers","following","location","bio","repos_url","html_url","href","DetailsContainer","App","path","render","match","params","component","exact","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.686ca4d6.chunk.js","sourcesContent":["import { IState, IAction } from \"../types\";\n\nexport const appReducer = (state: IState, action: IAction) :IState => {\n    const {payload} = action;\n    switch (action.type) {\n        case 'FETCH_INIT':\n            return {\n                ...state,\n                isLoading: true,\n                isError: false,\n                error: null\n            };\n        case 'FETCH_SUCCESS':\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: payload\n            };\n        case 'FETCH_FAILURE':\n            return {\n                ...state,\n                isLoading: false,\n                isError: true,\n                error: payload\n            };\n        case 'SET_DEBOUNCED_QUERY': {\n            return {\n                ...state,\n                query: payload.query,\n                currentPage: 1\n            }\n        }\n        case 'SET_PAGE': {\n            return {\n                ...state,\n                currentPage: payload\n            }\n        }\n        default: {\n            throw new Error(`Unhandled action type: ${action.type}`)\n        }\n    }\n}","import React from \"react\";\nimport {IDispatch, IState } from \"../types\";\n\n\nconst initialState = {\n    query: '',\n    currentPage: 1,\n    total: 0,\n    lastPage: 0,\n    isLoading: false,\n    isError: false,\n    data: null,\n    error: null\n};\n\nconst initialDispatch = {\n    dispatch: () => {}\n};\n\nconst AppStateContext = React.createContext<IState>(initialState);\nconst AppDispatchContext = React.createContext<IDispatch>(initialDispatch);\n// const AppDispatchContext = React.createContext<Dispatch<IAction>>({} as Dispatch<IAction>);\n\nconst useAppState = () => {\n    const context = React.useContext(AppStateContext)\n    if (context === undefined) {\n        throw new Error('AppContext must be used within an AppProvider')\n    }\n    return context\n};\n\n\nconst useAppDispatch = () => {\n    const context = React.useContext(AppDispatchContext)\n    if (context === undefined) {\n        throw new Error('AppDispatchContext must be used within an AppProvider')\n    }\n    return context\n};\n\nexport {useAppState, useAppDispatch, AppStateContext, AppDispatchContext, initialState}","import React from \"react\";\n\nimport {appReducer} from \"../reducer\";\nimport { AppStateContext, AppDispatchContext, initialState } from \"../context\";\n\ninterface IProps {\n    children?: React.ReactNode;\n}\n\nconst AppProvider = ({children}: IProps) => {\n    const [state, dispatch] = React.useReducer(appReducer, initialState);\n    console.log(state);\n    return (\n        <AppStateContext.Provider value={state}>\n            <AppDispatchContext.Provider value={{dispatch}}>\n                {children}\n            </AppDispatchContext.Provider>\n        </AppStateContext.Provider>\n    )\n}\n\nexport {AppProvider}","import React, { useState, useEffect } from 'react';\nimport { TextField } from '@material-ui/core';\n\nimport { useAppDispatch } from \"../../context\";\nimport { useDebounce } from \"../../hooks/useDebounce\";\n\n\n\nconst SearchInput = React.memo(({lastquery = ''}: {lastquery: string}) => {\n    const { dispatch } = useAppDispatch();\n    const [query, setQuery] = useState(lastquery);\n    const debounced = useDebounce(query, 300);\n    useEffect(() => {\n        if(debounced) {\n            dispatch({\n                type: 'SET_DEBOUNCED_QUERY',\n                payload: {\n                    query: debounced\n                }\n            });\n        }\n    }, [debounced])\n    return(\n        <TextField\n            type={'search'}\n            label={'Search user'}\n            variant={'outlined'}\n            value={query}\n            onChange={e => setQuery(e.target.value)}\n            placeholder={'Search GitHub user'}\n            />\n    )\n})\n\nexport { SearchInput }","import { useState, useEffect } from 'react';\n\nexport const useDebounce = (value: string, delay: number) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(\n        () => {\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [value, delay]\n    );\n\n    return debouncedValue;\n}","import React from 'react';\nimport { ListItem, ListItemText, ListItemAvatar, Avatar, ListItemSecondaryAction } from \"@material-ui/core\";\nimport { Link } from 'react-router-dom';\nimport { IUser } from \"../../types\";\n\ninterface IProps {\n    user: IUser\n}\n\nconst CustomListItem = (props : IProps) => {\n    const {user} = props;\n    return(\n        <ListItem>\n            <ListItemAvatar>\n                <Avatar src={user.avatar_url}/>\n            </ListItemAvatar>\n            <ListItemText primary={user.login} secondary={'Score: '+user.score}/>\n            <ListItemSecondaryAction>\n                <Link to={'/user/'+user.login}>\n                    more\n                </Link>\n            </ListItemSecondaryAction>\n        </ListItem>\n    )\n}\n\nexport { CustomListItem };","import React from 'react';\nimport { List } from \"@material-ui/core\";\nimport { CustomListItem } from \"./listitem\";\n\nimport { IResponse } from \"../../types\";\n\n\ninterface IProps {\n    data: IResponse\n}\n\nconst UserList = React.memo((props: IProps) => {\n    const {data} = props;\n    return(\n        <List dense={true}>\n            {data && data.users && data.users.map((user) => (\n                <CustomListItem key={user.id} user={ user }/>\n            ))}\n        </List>\n    )\n})\n\nexport { UserList };","import React from 'react';\nimport { IconButton } from '@material-ui/core';\n\ninterface IProps {\n    onClick: (e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => void,\n    index: number,\n    active: boolean\n}\n\nconst PaginationButton = ({ onClick, index, active }:IProps) => {\n    const color = active ?  'secondary' : 'primary';\n    return(\n        <IconButton size={'small'} color={color} onClick={onClick}>\n            {index}\n        </IconButton>\n    )\n}\n\nexport { PaginationButton };","import React from 'react';\nimport { parse, ParsedUrlQuery } from \"querystring\";\n\nimport { PaginationButton } from './button';\nimport { useAppDispatch } from '../../../context';\nimport { IDispatch, ILinks } from \"../../../types\";\n\ninterface IProps {\n    currentPage: number,\n    links?: ILinks\n}\n\nconst createPaginationArray = (currentPage: number, lastPage: number, { dispatch }: IDispatch) => {\n    let buttons = [];\n    for(let i = 1; i <= lastPage; i++){\n        buttons.push(\n            <PaginationButton\n                onClick={() => dispatch({\n                    type: \"SET_PAGE\",\n                    payload: i\n                })}\n                key={i}\n                index={i}\n                active={i === currentPage}\n            />\n        )\n    }\n    return buttons\n}\n\nconst PaginationContainer = React.memo((props: IProps ) => {\n    const { links, currentPage } = props;\n    if(!links){\n        return null\n    }\n    const lastPage = getLastPage(links, currentPage);\n    const dispatch = useAppDispatch();\n    return(\n        <div style={{display: 'flex', flexWrap:'wrap', justifyContent:'space-around'}}>\n            {createPaginationArray(currentPage, lastPage, dispatch)}\n        </div>\n    )\n})\n\nexport { PaginationContainer };\n\nconst getLastPage = (links : ILinks, currentPage: number) => {\n    if(!links.last){\n        return currentPage;\n    }\n    const parsedLink: ParsedUrlQuery = parse(links.last);\n    const page = parsedLink.page;\n    return parseInt(page as string)\n}","import { useState, useEffect } from 'react';\nimport axios, { AxiosResponse } from 'axios';\n\nimport { useAppDispatch } from '../context';\nimport { IResponse } from \"../types\";\n\n\nexport const useApi = (url: string = '') => {\n    const [query, setQuery] = useState(url);\n    const { dispatch } = useAppDispatch();\n    useEffect(() => {\n        let canceled = false;\n        const fetchData = async (): Promise<void> => {\n            dispatch({ type: 'FETCH_INIT', payload: undefined });\n            try {\n                const result: AxiosResponse<IResponse> = await axios(query);\n                if (!canceled) {\n                    dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\n                }\n            } catch (error) {\n                if (!canceled) {\n                    dispatch({ type: 'FETCH_FAILURE', payload: error.message });\n                }\n            }\n        };\n        if(query) {\n            fetchData();\n        }\n        return () => {\n            canceled = true;\n        };\n    }, [query]);\n\n    return [setQuery];\n};","interface IConstants {\n    GET_USERS_URL(query:string, page:number): string,\n    GET_USER_DETAILS_URL(name:string): string\n}\n\nconst API_URL: string = 'http://localhost:8080';\n\nexport const CONSTANTS: IConstants = {\n    GET_USERS_URL: (query, page) =>  `${API_URL}/users?query=${query}&page=${page}`,\n    GET_USER_DETAILS_URL: (name) => `${API_URL}/user?query=${name}`\n}","import React, { useEffect } from 'react';\nimport { Typography } from \"@material-ui/core\";\n\nimport { SearchInput } from \"../search/input\";\nimport { UserList } from \"./list\";\nimport { PaginationContainer } from \"./pagination/container\";\n\nimport { useAppState } from \"../../context\";\nimport { useApi } from \"../../hooks/useApi\";\n\nimport { CONSTANTS } from '../../utils/contants';\n\n\n\n\nconst ListContainer = () => {\n    const { query, currentPage, isLoading, isError, data, error } = useAppState();\n    const url = CONSTANTS.GET_USERS_URL(query, currentPage);\n    const [setUrl]  = useApi();\n    useEffect(() => {\n        if(query){\n            setUrl(url)\n        }\n    }, [query, currentPage])\n    return(\n        <div style={{width: 500}}>\n            <Typography variant={'h6'}>Welcome to the GitHub User Search App!</Typography>\n            <SearchInput lastquery={query}/>\n            {!data && !error && query && !isLoading &&\n                <Typography variant={'body1'}>No users available for this query.</Typography>}\n            {data && !isLoading &&\n                <>\n                    <Typography variant={'body1'}>Query result: {data.total} users</Typography>\n                    <UserList data={ data }/>\n                    <PaginationContainer currentPage={currentPage} links={data.links} />\n                </>}\n\n            {isLoading && <Typography variant={'body1'}>loading ...</Typography>}\n            {isError && <Typography variant={'body1'}>{error}</Typography>}\n        </div>\n    )\n}\n\nexport { ListContainer };","import React from 'react';\nimport { Avatar, List, ListItem, ListItemText, ListItemAvatar } from '@material-ui/core';\nimport { Link } from 'react-router-dom';\nimport { IResponse } from \"../../types\";\n\ninterface IProps {\n    data: IResponse\n}\n\nconst UserDetails = React.memo((props: IProps) => {\n    const { users }  = props.data;\n    const {login, avatar_url, company, followers,following, name, location, bio, repos_url, html_url } = users[0];\n    return(\n        <List dense={true}>\n            <ListItem>\n                <ListItemAvatar>\n                    <Avatar src={avatar_url} />\n                </ListItemAvatar>\n            </ListItem>\n            <ListItem>\n                <ListItemText primary={\"Username: \"} secondary={login}/>\n            </ListItem>\n            <ListItem>\n                <ListItemText primary={\"Name: \"} secondary={name}/>\n            </ListItem>\n            {location &&\n                <ListItem>\n                    <ListItemText primary={\"Location: \"} secondary={name}/>\n                </ListItem>}\n            <ListItem>\n                <ListItemText primary={\"Profile: \"} secondary={name}/>\n            </ListItem>\n            <ListItem>\n                <a href={html_url}>\n                    <ListItemText primary={\"Github url: \"} secondary={html_url}/>\n                </a>\n            </ListItem>\n            <ListItem>\n                <a href={repos_url}>\n                    <ListItemText primary={\"Repos url: \"} secondary={repos_url}/>\n                </a>\n            </ListItem>\n            {company &&\n                <ListItem>\n                    <ListItemText primary={\"Company: \"} secondary={company}/>\n                </ListItem>}\n            {bio &&\n                <ListItem>\n                    <ListItemText primary={\"Bio: \"} secondary={bio}/>\n                </ListItem>}\n            <ListItem>\n                <ListItemText primary={\"Followers: \"} secondary={followers}/>\n            </ListItem>\n            <ListItem>\n                <ListItemText primary={\"Following: \"} secondary={following}/>\n            </ListItem>\n            <ListItem>\n                <Link to={'/'}>\n                    back\n                </Link>\n            </ListItem>\n        </List>\n    )\n});\n\nexport { UserDetails };","import React, { useEffect } from 'react';\n\nimport { useAppState } from \"../../context\";\nimport { UserDetails } from './details';\nimport { useApi } from \"../../hooks/useApi\";\n\nimport { CONSTANTS } from \"../../utils/contants\";\nimport {Typography} from \"@material-ui/core\";\n\ninterface IProps {\n    login: string\n}\n\nconst DetailsContainer = (props: IProps) => {\n    const {login} = props;\n    const { data, isError, isLoading, error } = useAppState();\n    const url = CONSTANTS.GET_USER_DETAILS_URL(login);\n    const [setUrl] = useApi(url);\n    useEffect(() => {\n        setUrl(url)\n    }, [login])\n    return(\n        <>\n            {data && !isLoading && !isError && <UserDetails data={ data }/>}\n            {isLoading && <Typography variant={'body1'}>loading ...</Typography>}\n            {isError && <Typography variant={'body1'}>{error}</Typography>}\n        </>\n    )\n};\n\nexport { DetailsContainer };","import React from 'react';\nimport {BrowserRouter as Router, Route, RouteComponentProps} from 'react-router-dom';\n\nimport { AppProvider } from './provider';\nimport { ListContainer } from './components/list/container';\nimport { DetailsContainer } from './components/details/container';\n\ntype MatchParams = {\n    login: string\n}\n\ninterface MatchProps extends RouteComponentProps<MatchParams> {\n}\n\nconst App = () => (\n    <Router>\n        <AppProvider>\n            <Route path={'/user/:login'} render={( { match }:MatchProps ) => (\n                <DetailsContainer login={match.params.login} />)}/>\n            <Route path={'/users'} component={ListContainer}/>\n            <Route exact path={'/'} component={ListContainer}/>\n        </AppProvider>\n    </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}