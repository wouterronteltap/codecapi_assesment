{"version":3,"sources":["reducer/index.tsx","context/index.tsx","provider/index.tsx","utils/contants.tsx","components/search/input.tsx","hooks/useDebounce.tsx","components/list/listitem.tsx","components/list/list.tsx","components/list/pagination/button.tsx","components/list/pagination/container.tsx","hooks/useApi.tsx","components/list/container.tsx","components/details/details.tsx","components/details/container.tsx","App.tsx","serviceWorker.js","index.tsx"],"names":["appReducer","state","action","payload","type","isLoading","isError","error","data","Error","initialState","total","AppStateContext","React","createContext","AppDispatchContext","dispatch","useAppState","context","useContext","undefined","useAppDispatch","AppProvider","children","useReducer","Provider","value","CONSTANTS","query","page","SearchInput","memo","props","history","search","urlquery","useState","setQuery","debounced","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","push","TextField","label","variant","onChange","e","target","placeholder","CustomListItem","user","ListItem","ListItemAvatar","Avatar","src","avatar_url","ListItemText","primary","login","secondary","score","ListItemSecondaryAction","to","UserList","List","dense","users","map","key","id","PaginationButton","onClick","index","color","active","IconButton","size","createPaginationArray","lastPage","currentpage","buttons","i","currentSearch","queryString","parse","split","PaginationContainer","links","location","getLastPage","style","display","flexWrap","justifyContent","currentPage","last","parseInt","useApi","url","canceled","a","axios","result","message","fetchData","ListContainer","current","parsed","pageParam","destructQueryString","setUrl","width","Typography","UserDetails","company","followers","following","name","bio","repos_url","html_url","href","Button","goBack","DetailsContainer","App","path","render","match","params","exact","isLocalhost","Boolean","window","hostname","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","ReactDOM","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.9cc9cb3c.chunk.js","sourcesContent":["import { IState, IAction } from \"../types\";\n\nexport const appReducer = (state: IState, action: IAction) :IState => {\n    const {payload} = action;\n    switch (action.type) {\n        case 'FETCH_INIT':\n            return {\n                ...state,\n                isLoading: true,\n                isError: false,\n                error: null\n            };\n        case 'FETCH_SUCCESS':\n            return {\n                ...state,\n                isLoading: false,\n                isError: false,\n                data: payload\n            };\n        case 'FETCH_FAILURE':\n            return {\n                ...state,\n                isLoading: false,\n                isError: true,\n                error: payload\n            };\n        default: {\n            throw new Error(`Unhandled action type: ${action.type}`)\n        }\n    }\n}","import React from \"react\";\nimport {IDispatch, IState } from \"../types\";\n\n\nconst initialState = {\n    total: 0,\n    isLoading: false,\n    isError: false,\n    data: null,\n    error: null\n};\n\nconst initialDispatch = {\n    dispatch: () => {}\n};\n\nconst AppStateContext = React.createContext<IState>(initialState);\nconst AppDispatchContext = React.createContext<IDispatch>(initialDispatch);\n\nconst useAppState = () => {\n    const context = React.useContext(AppStateContext)\n    if (context === undefined) {\n        throw new Error('AppContext must be used within an AppProvider')\n    }\n    return context\n};\n\n\nconst useAppDispatch = () => {\n    const context = React.useContext(AppDispatchContext)\n    if (context === undefined) {\n        throw new Error('AppDispatchContext must be used within an AppProvider')\n    }\n    return context\n};\n\nexport {useAppState, useAppDispatch, AppStateContext, AppDispatchContext, initialState}","import React from \"react\";\n\nimport {appReducer} from \"../reducer\";\nimport { AppStateContext, AppDispatchContext, initialState } from \"../context\";\n\ninterface IProps {\n    children?: React.ReactNode;\n}\n\nconst AppProvider = ({children}: IProps) => {\n    const [state, dispatch] = React.useReducer(appReducer, initialState);\n    return (\n        <AppStateContext.Provider value={state}>\n            <AppDispatchContext.Provider value={{dispatch}}>\n                {children}\n            </AppDispatchContext.Provider>\n        </AppStateContext.Provider>\n    )\n}\n\nexport {AppProvider}","interface IConstants {\n    GET_USERS_URL: string,\n    GET_USER_DETAILS_URL: string,\n    QUERY_TEMPLATE(query:string): string,\n    PAGE_TEMPLATE(page: number): string\n}\n\nconst API_URL: string = 'http://localhost:8080';\n\nexport const CONSTANTS: IConstants = {\n    GET_USERS_URL: `${API_URL}/users`,\n    GET_USER_DETAILS_URL: `${API_URL}/user?query=`,\n    QUERY_TEMPLATE: (query) => `?query=${query}`,\n    PAGE_TEMPLATE: (page) => `&page=${page}`\n}","import React, { useState, useEffect } from 'react';\nimport { TextField } from '@material-ui/core';\nimport { History } from 'history';\n\nimport { useDebounce } from \"../../hooks/useDebounce\";\nimport { CONSTANTS } from \"../../utils/contants\";\n\ninterface IProps {\n    search: string,\n    history: History,\n    urlquery: string\n}\n\nconst SearchInput = React.memo((props:IProps) => {\n    const { history, search, urlquery } = props;\n    const [query, setQuery] = useState('');\n    const debounced = useDebounce(query, 300);\n    useEffect(() => {\n        if(debounced){\n            history.push(CONSTANTS.QUERY_TEMPLATE(debounced));\n        }\n    }, [debounced]);\n    useEffect(() => {\n        if(search){\n            history.push(search);\n        }\n    }, []);\n    return(\n        <TextField\n            type={'search'}\n            label={'Search user'}\n            variant={'outlined'}\n            value={urlquery}\n            onChange={e => setQuery(e.target.value)}\n            placeholder={'Search GitHub user'}\n            />\n    )\n});\n\nexport { SearchInput }","import { useState, useEffect } from 'react';\n\nexport const useDebounce = (value: string, delay: number) => {\n    const [debouncedValue, setDebouncedValue] = useState(value);\n    useEffect(\n        () => {\n            const handler = setTimeout(() => {\n                setDebouncedValue(value);\n            }, delay);\n            return () => {\n                clearTimeout(handler);\n            };\n        },\n        [value, delay]\n    );\n\n    return debouncedValue;\n}","import React from 'react';\nimport { ListItem, ListItemText, ListItemAvatar, Avatar, ListItemSecondaryAction } from \"@material-ui/core\";\nimport { Link } from 'react-router-dom';\nimport { IUser } from \"../../types\";\n\ninterface IProps {\n    user: IUser\n}\n\nconst CustomListItem = (props : IProps) => {\n    const {user} = props;\n    return(\n        <ListItem>\n            <ListItemAvatar>\n                <Avatar src={user.avatar_url}/>\n            </ListItemAvatar>\n            <ListItemText primary={user.login} secondary={'Score: '+user.score}/>\n            <ListItemSecondaryAction>\n                <Link to={'/user/'+user.login}>\n                    more\n                </Link>\n            </ListItemSecondaryAction>\n        </ListItem>\n    )\n}\n\nexport { CustomListItem };","import React from 'react';\nimport { List } from \"@material-ui/core\";\nimport { CustomListItem } from \"./listitem\";\n\nimport { IResponse } from \"../../types\";\n\n\ninterface IProps {\n    data: IResponse\n}\n\nconst UserList = React.memo((props: IProps) => {\n    const {data} = props;\n    return(\n        <List dense={true}>\n            {data && data.users && data.users.map((user) => (\n                <CustomListItem key={user.id} user={ user }/>\n            ))}\n        </List>\n    )\n})\n\nexport { UserList };","import React from 'react';\nimport { IconButton } from '@material-ui/core';\n\ninterface IProps {\n    onClick: (e: React.MouseEvent<HTMLDivElement | HTMLButtonElement>) => void,\n    index: number,\n    active: boolean\n}\n\nconst PaginationButton = ({ onClick, index, active }:IProps) => {\n    const color = active ?  'secondary' : 'primary';\n    return(\n        <IconButton size={'small'} color={color} onClick={onClick}>\n            {index}\n        </IconButton>\n    )\n}\n\nexport { PaginationButton };","import React from 'react';\nimport queryString from \"query-string\";\nimport { History } from \"history\";\n\nimport { PaginationButton } from './button';\nimport { ILinks } from \"../../../types\";\nimport { CONSTANTS } from \"../../../utils/contants\";\n\ninterface IProps {\n    links?: ILinks,\n    history: History,\n    currentpage: number\n}\n\nconst updatedPageParam = (currentSearch:string, index:number):string => {\n    if(!queryString.parse(currentSearch).page){\n        return currentSearch+CONSTANTS.PAGE_TEMPLATE(index)\n    }else{\n        return currentSearch.split('&')[0]+CONSTANTS.PAGE_TEMPLATE(index)\n    }\n}\n\nconst createPaginationArray = (lastPage: number, history: History, search:string, currentpage:number) => {\n    let buttons = [];\n    for(let i = 1; i <= lastPage; i++){\n        buttons.push(\n            <PaginationButton\n                onClick={() => history.push(updatedPageParam(search, i))}\n                key={i}\n                index={i}\n                active={i === currentpage}\n            />\n        )\n    }\n    return buttons\n}\n\nconst PaginationContainer = React.memo((props: IProps ) => {\n    const { links, history, currentpage } = props;\n    if(!links){\n        return null\n    }\n    const {search} = history.location;\n    const lastPage = getLastPage(links, currentpage);\n    return(\n        <div style={{display: 'flex', flexWrap:'wrap', justifyContent:'space-around'}}>\n            {createPaginationArray(lastPage, history, search, currentpage)}\n        </div>\n    )\n})\n\nexport { PaginationContainer };\n\nconst getLastPage = (links : ILinks, currentPage: number) => {\n    if(!links.last){\n        return currentPage;\n    }\n    const parsedLink = queryString.parse(links.last);\n    const page = parsedLink.page;\n    return parseInt(page as string)\n}","import { useState, useEffect } from 'react';\nimport axios, { AxiosResponse } from 'axios';\n\nimport { useAppDispatch } from '../context';\nimport { IResponse } from \"../types\";\n\n\nexport const useApi = (url: string = '') => {\n    const [query, setQuery] = useState(url);\n    const { dispatch } = useAppDispatch();\n    useEffect(() => {\n        let canceled = false;\n        const fetchData = async (): Promise<void> => {\n            dispatch({ type: 'FETCH_INIT', payload: undefined });\n            try {\n                const result: AxiosResponse<IResponse> = await axios(query);\n                if (!canceled) {\n                    dispatch({ type: 'FETCH_SUCCESS', payload: result.data });\n                }\n            } catch (error) {\n                if (!canceled) {\n                    dispatch({ type: 'FETCH_FAILURE', payload: error.message });\n                }\n            }\n        };\n        if(query) {\n            fetchData();\n        }\n        return () => {\n            canceled = true;\n        };\n    }, [query]);\n\n    return [setQuery];\n};","import React, { useEffect } from 'react';\nimport { Typography } from \"@material-ui/core\";\nimport {RouterProps} from \"react-router\";\nimport queryString from 'query-string';\n\nimport { SearchInput } from \"../search/input\";\nimport { UserList } from \"./list\";\nimport { PaginationContainer } from \"./pagination/container\";\n\nimport { useAppState } from \"../../context\";\nimport { useApi } from \"../../hooks/useApi\";\nimport { CONSTANTS } from '../../utils/contants';\n\nconst destructQueryString = (search: string) => {\n    const parsed = queryString.parse(search);\n    let pageParam = parsed.page ? parseInt(parsed.page as string) : 1\n    let queryParam = parsed.query ? parsed.query as string : '';\n    return { query: queryParam, page: pageParam }\n}\n\nconst ListContainer = ({history}:RouterProps) => {\n    const { isLoading, isError, data, error } = useAppState();\n    const { search } = history.location;\n    const current = destructQueryString(search);\n    const [setUrl]  = useApi();\n    useEffect(() => {\n        if(search){\n            const url = CONSTANTS.GET_USERS_URL+search;\n            setUrl(url)\n        }\n    }, [search])\n    return(\n        <div style={{width: 500}}>\n            <Typography variant={'h6'}>Welcome to the GitHub User Search App!</Typography>\n            <SearchInput search={search} history={history} urlquery={current.query}/>\n            {!data && !error && search && !isLoading &&\n                <Typography variant={'body1'}>No users available for this query.</Typography>}\n            {data && !isLoading &&\n                <>\n                    <Typography variant={'body1'}>Query result: {data.total} users</Typography>\n                    <UserList data={ data }/>\n                    <PaginationContainer links={data.links} history={history} currentpage={current.page}/>\n                </>}\n\n            {isLoading && <Typography variant={'body1'}>loading ...</Typography>}\n            {isError && <Typography variant={'body1'}>{error}</Typography>}\n        </div>\n    )\n}\n\nexport { ListContainer };","import React from 'react';\nimport { Avatar, List, ListItem, ListItemText, ListItemAvatar, Button } from '@material-ui/core';\nimport { History } from \"history\";\nimport { IResponse } from \"../../types\";\n\ninterface IProps {\n    data: IResponse,\n    history: History\n}\n\nconst UserDetails = React.memo((props: IProps) => {\n    const { users }  = props.data;\n    const {login, avatar_url, company, followers,following, name, location, bio, repos_url, html_url } = users[0];\n    return(\n        <List dense={true}>\n            <ListItem>\n                <ListItemAvatar>\n                    <Avatar src={avatar_url} />\n                </ListItemAvatar>\n            </ListItem>\n            <ListItem>\n                <ListItemText primary={\"Username: \"} secondary={login}/>\n            </ListItem>\n            <ListItem>\n                <ListItemText primary={\"Name: \"} secondary={name}/>\n            </ListItem>\n            {location &&\n                <ListItem>\n                    <ListItemText primary={\"Location: \"} secondary={name}/>\n                </ListItem>}\n            <ListItem>\n                <ListItemText primary={\"Profile: \"} secondary={name}/>\n            </ListItem>\n            <ListItem>\n                <a href={html_url}>\n                    <ListItemText primary={\"Github url: \"} secondary={html_url}/>\n                </a>\n            </ListItem>\n            <ListItem>\n                <a href={repos_url}>\n                    <ListItemText primary={\"Repos url: \"} secondary={repos_url}/>\n                </a>\n            </ListItem>\n            {company &&\n                <ListItem>\n                    <ListItemText primary={\"Company: \"} secondary={company}/>\n                </ListItem>}\n            {bio &&\n                <ListItem>\n                    <ListItemText primary={\"Bio: \"} secondary={bio}/>\n                </ListItem>}\n            <ListItem>\n                <ListItemText primary={\"Followers: \"} secondary={followers}/>\n            </ListItem>\n            <ListItem>\n                <ListItemText primary={\"Following: \"} secondary={following}/>\n            </ListItem>\n            <Button variant={'outlined'} onClick={() => props.history.goBack()}>\n                back\n            </Button>\n        </List>\n    )\n});\n\nexport { UserDetails };","import React, { useEffect } from 'react';\nimport { History } from \"history\";\n\nimport { useAppState } from \"../../context\";\nimport { UserDetails } from './details';\nimport { useApi } from \"../../hooks/useApi\";\n\nimport { CONSTANTS } from \"../../utils/contants\";\nimport {Typography} from \"@material-ui/core\";\n\ninterface IProps {\n    login: string,\n    history: History\n}\n\nconst DetailsContainer = (props: IProps) => {\n    const { login, history } = props;\n    const { data, isError, isLoading, error } = useAppState();\n    const url = CONSTANTS.GET_USER_DETAILS_URL+login;\n    const [setUrl] = useApi(url);\n    useEffect(() => {\n        setUrl(url)\n    }, [login]);\n    return(\n        <>\n            {data && !isLoading && !isError && <UserDetails data={ data } history={history}/>}\n            {isLoading && <Typography variant={'body1'}>loading ...</Typography>}\n            {isError && <Typography variant={'body1'}>{error}</Typography>}\n        </>\n    )\n};\n\nexport { DetailsContainer };","import React from 'react';\nimport {BrowserRouter as Router, Route, RouteComponentProps} from 'react-router-dom';\n\nimport { AppProvider } from './provider';\nimport { ListContainer } from './components/list/container';\nimport { DetailsContainer } from './components/details/container';\n\ntype MatchParams = {\n    login: string\n}\n\ninterface MatchProps extends RouteComponentProps<MatchParams> {\n}\n\nconst App = () => (\n    <Router>\n        <AppProvider>\n            <Route path={'/user/:login'} render={({ match, history }:MatchProps ) => (\n                <DetailsContainer login={match.params.login} history={history}/>)}/>\n            <Route path={'/users'} render={({history}:RouteComponentProps) => (\n                <ListContainer history={history} />)} />\n            <Route exact path={'/'} render={({history }:RouteComponentProps) => (\n                <ListContainer history={history} />)}/>\n        </AppProvider>\n    </Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}